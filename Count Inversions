class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    typedef long long int dt;
    dt merge(dt arr[],dt temp[],dt low,dt mid,dt high){
        dt i,j,k;
        dt count=0;
        i=low;
        j=mid;
        k=low;
        while((i<=mid-1) && (j<=high)){
            if(arr[i]<=arr[j]){
                temp[k++]=arr[i++];
            }
            else{
                temp[k++]=arr[j++];
                count=count+(mid-i);
            }
        }
        while(i<=mid-1){
            temp[k++]=arr[i++];
        }
        while(j<=high){
            temp[k++]=arr[j++];
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp[i];
        }
        return count;
    }
    dt count(dt arr[],dt temp[],dt low,dt high){
        dt res=0;
        if(high>low){
            dt mid=(low+high)/2;
            res+=count(arr,temp,low,mid);
            res+=count(arr,temp,mid+1,high);
            res+=merge(arr,temp,low,mid+1,high);
        }
        return res;
    }
    long long int inversionCount(long long arr[], long long n)
    {
        dt temp[n];
        return count(arr,temp,0,n-1);
    }

};
